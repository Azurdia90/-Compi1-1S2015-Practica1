
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return tabla_simbolos.class;
}

  /** Default constructor. */
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\013\000\002\005\012\000\002\006\013" +
    "\000\002\007\003\000\002\007\003\000\002\010\006\000" +
    "\002\011\005\000\002\012\012\000\002\013\012\000\002" +
    "\014\016\000\002\015\003\000\002\015\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\004\004\005\001\002\000\004\002\000\001" +
    "\002\000\004\007\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\005\011\001\002\000" +
    "\004\004\012\001\002\000\004\010\020\001\002\000\004" +
    "\004\014\001\002\000\004\006\015\001\002\000\004\007" +
    "\016\001\002\000\004\005\017\001\002\000\004\002\uffff" +
    "\001\002\000\004\005\021\001\002\000\004\016\022\001" +
    "\002\000\004\004\023\001\002\000\004\006\024\001\002" +
    "\000\004\010\025\001\002\000\004\005\026\001\002\000" +
    "\004\004\027\001\002\000\004\011\031\001\002\000\004" +
    "\004\ufffe\001\002\000\004\005\032\001\002\000\004\004" +
    "\033\001\002\000\004\012\041\001\002\000\004\004\035" +
    "\001\002\000\004\006\036\001\002\000\004\011\037\001" +
    "\002\000\004\005\040\001\002\000\004\004\ufffd\001\002" +
    "\000\004\005\042\001\002\000\004\017\043\001\002\000" +
    "\004\004\044\001\002\000\004\006\045\001\002\000\004" +
    "\012\046\001\002\000\004\005\047\001\002\000\004\004" +
    "\050\001\002\000\006\011\031\013\054\001\002\000\004" +
    "\004\ufffb\001\002\000\004\004\ufffa\001\002\000\004\004" +
    "\ufffc\001\002\000\004\005\055\001\002\000\004\004\060" +
    "\001\002\000\004\004\070\001\002\000\004\004\ufff9\001" +
    "\002\000\004\012\061\001\002\000\004\005\062\001\002" +
    "\000\004\017\063\001\002\000\004\004\064\001\002\000" +
    "\004\006\065\001\002\000\004\012\066\001\002\000\004" +
    "\005\067\001\002\000\004\004\ufff7\001\002\000\004\014" +
    "\115\001\002\000\004\004\073\001\002\000\004\004\ufff8" +
    "\001\002\000\006\006\076\015\075\001\002\000\004\004" +
    "\ufff4\001\002\000\004\005\103\001\002\000\004\013\077" +
    "\001\002\000\004\005\100\001\002\000\004\004\101\001" +
    "\002\000\004\013\054\001\002\000\004\004\ufff3\001\002" +
    "\000\004\020\104\001\002\000\004\004\105\001\002\000" +
    "\004\006\106\001\002\000\004\015\107\001\002\000\004" +
    "\005\110\001\002\000\004\004\111\001\002\000\004\006" +
    "\112\001\002\000\004\013\113\001\002\000\004\005\114" +
    "\001\002\000\004\004\ufff5\001\002\000\004\005\116\001" +
    "\002\000\004\017\117\001\002\000\004\004\120\001\002" +
    "\000\004\006\121\001\002\000\004\014\122\001\002\000" +
    "\004\005\123\001\002\000\004\004\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\050\007\052\010\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\056\012\055\001\001\000" +
    "\004\013\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\073\015\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s){ 
 System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
 System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido."); 
} 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ESTRUCTURA 
            {
              Object RESULT =null;
		 System.out.println("DATOS CORRECTOS"); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ESTRUCTURA ::= abrir r_estructura cerrar DIRECTORIO abrir fin r_estructura cerrar 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DIRECTORIO ::= abrir r_directorio cerrar directorio abrir fin r_directorio cerrar CARPETA 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DIRECTORIO",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CARPETA ::= abrir r_carpeta cerrar NOMBRE_CARPETA abrir fin r_carpeta cerrar 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CARPETA",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NOMBRE_CARPETA ::= abrir r_nombre cerrar nombre_archivo abrir fin r_nombre cerrar CONTENIDO_CARPETA 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_CARPETA",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONTENIDO_CARPETA ::= CARPETA 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CARPETA",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONTENIDO_CARPETA ::= DOCUMENTO 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO_CARPETA",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DOCUMENTO ::= abrir r_documento cerrar CONTENIDO_DOCUMENTO 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DOCUMENTO",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENIDO_DOCUMENTO ::= NOMBRE_DOCUMENTO TIPO_DOCUMENTO FIN_DOCUMENTO 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDO_DOCUMENTO",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NOMBRE_DOCUMENTO ::= abrir r_nombre cerrar nombre_archivo abrir fin r_nombre cerrar 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRE_DOCUMENTO",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO_DOCUMENTO ::= abrir r_formato cerrar nombre_archivo abrir fin r_formato cerrar 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_DOCUMENTO",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INTERIOR ::= abrir r_contenido cerrar contenido abrir fin r_contenido cerrar abrir fin r_documento cerrar 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INTERIOR",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FIN_DOCUMENTO ::= INTERIOR 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIN_DOCUMENTO",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FIN_DOCUMENTO ::= abrir fin r_documento cerrar DOCUMENTO 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIN_DOCUMENTO",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
